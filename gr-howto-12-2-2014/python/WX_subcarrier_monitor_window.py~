#
# Copyright 2009 Free Software Foundation, Inc.
#
# This file is part of GNU Radio
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#

##################################################
# Imports
##################################################
from gnuradio.wxgui import common
import wx
import numpy
import math
from gnuradio.wxgui import pubsub
from gnuradio.wxgui.constants import *
from gnuradio import gr #for gr.prefs

import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import \
    FigureCanvasWxAgg as FigCanvas, \
    NavigationToolbar2WxAgg as NavigationToolbar

##################################################
# Constants
##################################################
DEFAULT_WIN_SIZE = (300, 600)

##################################################
# subcarrier monitor window control panel
##################################################
class control_panel(wx.Frame):
	"""
	A control panel with wx widgits to control the plotter and subcarrier monitor.
	"""
	
	def __init__(self, parent):
		"""
		Create a new control panel.
		
		Args:
		    parent: the wx parent window
		"""
		

		#set sizer
		self.SetSizerAndFit(control_box)

##################################################
# histo window with plotter and control panel
##################################################
class subcarrier_monitor_window(wx.Frame, pubsub.pubsub):
	def __init__(
		self,
		parent,
		controller,
		size,
		title,
		maximum_key,
		minimum_key,
		num_bins_key,
		msg_key,
	):
		pubsub.pubsub.__init__(self)
		#setup
		self.samples = list()
		#proxy the keys
		self.proxy(MAXIMUM_KEY, controller, maximum_key)
		self.proxy(MINIMUM_KEY, controller, minimum_key)
		self.proxy(NUM_BINS_KEY, controller, num_bins_key)
		self.proxy(MSG_KEY, controller, msg_key)
		#initialize values
		#self[RUNNING_KEY] = True
		#self[X_DIVS_KEY] = 8
		#self[Y_DIVS_KEY] = 4

		#init panel and plot
		num_subchannel =30
		wx.Frame.__init__(self, None, -1, title)
		self.parent = parent
		self.panel = wx.Panel(self)
		#parent[SHOW_CONTROL_PANEL_KEY] = True
		#parent.subscribe(SHOW_CONTROL_PANEL_KEY, self.Show)

		self.fig = Figure(facecolor='white')
		self.canvas = FigCanvas(self.panel, -1, self.fig)
		self.axes = self.fig.add_subplot(111)		

		#check box to show detail
		self.show_detail = wx.CheckBox(self.panel, -1, 
			"Show detail",
			style=wx.ALIGN_RIGHT)
		self.Bind(wx.EVT_CHECKBOX, self.on_show_detail, self.show_detail)

		#slider 
		self.slider_label = wx.StaticText(self.panel, -1, 
			"Subchannel slider: ")
		self.slider_width = wx.Slider(self.panel, -1, 
			value=1, 
			minValue=1,
			maxValue=num_subchannel-14,
			size=(300,70),
			style=wx.SL_AUTOTICKS | wx.SL_LABELS)
		self.slider_width.SetTickFreq(10, 1)
		self.Bind(wx.EVT_COMMAND_SCROLL_THUMBTRACK, self.on_slider_width, self.slider_width)

		#panel layout
		#self.control_box = wx.BoxSizer(wx.HORIZONTAL)
		#flags = wx.ALIGN_LEFT | wx.ALL | wx.ALIGN_CENTER_VERTICAL
		#self.control_box.Add(self.slider_label, 0, flag=flags)
		#self.control_box.Add(self.slider_width, 0, border=3, flag=flags)
		#self.control_box.Add(self.show_detail, 0, border=3, flag=flags)
		#self.panel = wx.Panel(self, parent, style=wx.SIMPLE_BORDER)
		#self.fig = Figure(facecolor='white')
		#self.canvas = FigCanvas(self.panel, -1, self.fig)
		#self.axes = self.fig.add_subplot(111)
		
		#setup the box with plot and controls
		#self.control_panel = control_panel(self)
		#self.main_box = wx.BoxSizer(wx.HORIZENTAL)
		#self.main_box.Add(self.canvas, 1, wx.EXPAND)
		#self.main_box.Add(self.control_panel, 0, wx.EXPAND)
		#self.SetSizerAndFit(main_box)

		self.vbox = wx.BoxSizer(wx.VERTICAL)
		self.vbox.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
        
		self.hbox = wx.BoxSizer(wx.HORIZONTAL)
		flags = wx.ALIGN_LEFT | wx.ALL | wx.ALIGN_CENTER_VERTICAL
		self.hbox.Add(self.slider_label, 0, flag=flags)
		self.hbox.Add(self.slider_width, 0, border=3, flag=flags)
		self.hbox.Add(self.show_detail, 0, border=3, flag=flags)
        
		self.vbox.Add(self.hbox, 0, flag = wx.ALIGN_LEFT | wx.TOP)
        
		self.panel.SetSizer(self.vbox)
		self.vbox.Fit(self)

		#register events
		#self.subscribe(MSG_KEY, self.handle_msg)
		#self.subscribe(X_DIVS_KEY, self.update_grid)
		#self.subscribe(Y_DIVS_KEY, self.update_grid)
		self.draw_figure()
	

	def handle_msg(self, msg):
		"""
		Handle the message from the fft sink message queue.
		
		Args:
		    msg: the frame as a character array
		"""
		if not self[RUNNING_KEY]: return
		#convert to floating point numbers
		self.samples = numpy.fromstring(msg, numpy.float32)[:self[NUM_BINS_KEY]*4] #only take first frame
		
		self.draw_figure()

	def draw_figure(self):
		""" Redraws the figure
		"""
		# clear the axes and redraw the plot anew
		self.axes.clear()
       
       		# draw the figure 
		if self.show_detail.IsChecked():
			self.slider_width.Enable()
			slide_value = self.slider_width.GetValue()
        
			menMeans = numpy.arange(1,31)
			womenMeans = menMeans[::-1]
			ind = numpy.arange(slide_value, slide_value + 15)    # the x locations for the groups
			width = 0.6       # the width of the bars: can also be len(x) sequence   
			self.axes.barh(ind, menMeans[slide_value-1: slide_value + 14],   width, color='r', 
				align='center',alpha=0.2)
			self.axes.barh(ind, womenMeans[slide_value-1: slide_value + 14], width, color='y', 
				left=menMeans[slide_value-1: slide_value + 14], align='center',alpha=0.2)
			self.axes.set_yticks(range(slide_value, slide_value + 15))
		else:
			self.slider_width.Disable()
			menMeans = numpy.arange(1,31)
			womenMeans = menMeans[::-1]
			ind = numpy.arange(1, 31)    # the x locations for the groups
			width = 0.6       # the width of the bars: can also be len(x) sequence   
			self.axes.barh(ind, menMeans,   width, color='r', align='center',alpha=0.2)
			self.axes.barh(ind, womenMeans, width, color='y', left=menMeans, align='center',alpha=0.2)
			self.axes.set_yticks(range(1, 31))
            
		self.axes.set_xlabel('power')
		self.axes.set_ylabel('subchannel')
		self.axes.set_title('Subchannel and Power Allocation')
		self.canvas.draw()

	def on_show_detail(self, event):
		self.draw_figure()

	def on_slider_width(self, event):
		self.draw_figure()

	def update_grid(self):
		if not len(self.samples): return
		#calculate the maximum y value
		y_off = math.ceil(numpy.max(self.samples))
		y_off = min(max(y_off, 1.0), 100.0) #between 1% and 100%
		#update the x grid
		self.plotter.set_x_grid(
			self[MINIMUM_KEY], self[MAXIMUM_KEY],
			common.get_clean_num((self[MAXIMUM_KEY] - self[MINIMUM_KEY])/self[X_DIVS_KEY]),
		)
		self.plotter.set_x_label('Counts')
		#update the y grid
		self.plotter.set_y_grid(0, y_off, y_off/self[Y_DIVS_KEY])
		self.plotter.set_y_label('Frequency', '%')
		self.plotter.update()
