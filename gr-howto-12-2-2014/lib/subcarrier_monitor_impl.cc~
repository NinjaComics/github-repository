/* -*- c++ -*- */
/* 
 * Copyright 2013 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "subcarrier_monitor_impl.h"
#include "iostream"

namespace gr {
  namespace howto {

    subcarrier_monitor::sptr
    subcarrier_monitor::make(msg_queue::sptr msgq)
    {
      return gnuradio::get_initial_sptr
        (new subcarrier_monitor_impl(msgq));
    }

    /*
     * The private constructor
     */
    subcarrier_monitor_impl::subcarrier_monitor_impl(msg_queue::sptr msgq)
      : sync_block("subcarrier_monitor",
              io_signature::make(1, 1, sizeof(int)),
              io_signature::make(0, 0, 0)),
	d_msgq(msgq), d_num_bins(11)
    {set_num_bins(d_num_bins);}

    /*
     * Our virtual destructor.
     */
    subcarrier_monitor_impl::~subcarrier_monitor_impl()
    {
    }

    int
    subcarrier_monitor_impl::work(int noutput_items,
			  gr_vector_const_void_star &input_items,
			  gr_vector_void_star &output_items)
    {
        const int *in = (const int *) input_items[0];

        // Do <+signal processing+>
	for (int i = 0; i < 16; i++){
		std::cout << in[i]<<"   ";
	}

	/* output queue full, drop the data */
        if(d_msgq->full_p())
          return;
        // Tell runtime system how many output items we produced.
	/* Build a message to hold the output records */
        message::sptr msg = message::make(0, 0, 100, d_num_bins*sizeof(int));
        int *out = (int *)msg->msg(); // get pointer to raw message buffer
        /* normalize the bins and put into message */
        for(unsigned int i = 0; i < d_num_bins; i++) {
          out[i] = in[i];
        }
        /* send the message */
        d_msgq->handle(msg);

        return noutput_items;
    }

    unsigned int
    subcarrier_monitor_impl::get_num_bins(void)
    {
      return d_num_bins;
    }

    void
    subcarrier_monitor_impl::set_num_bins(unsigned int num_bins) {
      gr::thread::scoped_lock guard(d_mutex);    // hold mutex for duration of this function
      d_num_bins = num_bins;
    }

  } /* namespace howto */
} /* namespace gr */

