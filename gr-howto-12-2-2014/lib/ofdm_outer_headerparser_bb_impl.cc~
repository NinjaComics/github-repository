/* -*- c++ -*- */
/* 
 * Copyright 2014 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "ofdm_outer_headerparser_bb_impl.h"

namespace gr {
  namespace howto {

    ofdm_outer_headerparser_bb::sptr
    ofdm_outer_headerparser_bb::make()
    {
      return gnuradio::get_initial_sptr
        (new ofdm_outer_headerparser_bb_impl());
    }

    /*
     * The private constructor
     */
    ofdm_outer_headerparser_bb_impl::ofdm_outer_headerparser_bb_impl()
      : sync_block("ofdm_outer_headerparser_bb",
              io_signature::make(1, 1, sizeof (unsigned char)),
              io_signature::make(0,0,0)),
	d_occupied_carriers(occupied_carriers)
    {
	d_constellation = gr::howto::constellation_bpsk::make();
    }

    /*
     * Our virtual destructor.
     */
    ofdm_outer_headerparser_bb_impl::~ofdm_outer_headerparser_bb_impl()
    {
    }

    int
    ofdm_outer_headerparser_bb_impl::work(int noutput_items,
			  gr_vector_const_void_star &input_items,
			  gr_vector_void_star &output_items)
    {
        const gr_complex *in = (const gr_complex *) input_items[0];

        if (noutput_items < d_occupied_carriers[0].size()) {
		return 0;
	}

	std::vector<tag_t> tags;
	get_tags_in_range(
	  tags, 0,
	  nitems_read(0),
	  nitems_read(0)+d_occupied_carriers[0].size()
	);

	int outer_header_len = 6;
	std::vector<char> pid(outer_header_len);
	for(int i=0;i<d_occupied_carriers[0].size();i++){
		for(int j=0;j<outer_header_len;j++){
			pid = 
		}
	}

        // Tell runtime system how many output items we produced.
        return noutput_items;
    }

  } /* namespace howto */
} /* namespace gr */

