<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc" kind="class" prot="public" abstract="yes">
    <compoundname>gr::howto::ofdm_carrier_allocator_cvc</compoundname>
    <basecompoundref prot="public" virt="virtual">tagged_stream_block</basecompoundref>
    <includes refid="ofdm__carrier__allocator__cvc_8h" local="no">ofdm_carrier_allocator_cvc.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a52b7a2ff1042c6806ac956420cc23460" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc" kindref="compound">ofdm_carrier_allocator_cvc</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ofdm_carrier_allocator_cvc&gt; gr::howto::ofdm_carrier_allocator_cvc::sptr</definition>
        <argsstring></argsstring>
        <name>sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" line="69" column="1" bodyfile="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a480fceae7d7c205082dce83723330cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string gr::howto::ofdm_carrier_allocator_cvc::len_tag_key</definition>
        <argsstring>()=0</argsstring>
        <name>len_tag_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a0076ddc0e1b9ce0d06d4fe5f54a253d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const int</type>
        <definition>virtual const int gr::howto::ofdm_carrier_allocator_cvc::fft_len</definition>
        <argsstring>()=0</argsstring>
        <name>fft_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1ab75b49f8b136c4322c1c20030ff86de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>virtual std::vector&lt;std::vector&lt;int&gt; &gt; gr::howto::ofdm_carrier_allocator_cvc::occupied_carriers</definition>
        <argsstring>()=0</argsstring>
        <name>occupied_carriers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1aadbf0eb1e883bdd45ce442e8af76613d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>virtual std::vector&lt;std::vector&lt;int&gt; &gt; gr::howto::ofdm_carrier_allocator_cvc::pilot_carriers</definition>
        <argsstring>()=0</argsstring>
        <name>pilot_carriers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" line="74" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a233f112ad37ffa10a27dcdc7fe5f4809" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a52b7a2ff1042c6806ac956420cc23460" kindref="member">sptr</ref></type>
        <definition>static sptr gr::howto::ofdm_carrier_allocator_cvc::make</definition>
        <argsstring>(int num_user, float total_power, int bandwidth, float noise_density, int fft_len, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;occupied_carriers, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;pilot_carriers, const std::vector&lt; std::vector&lt; gr_complex &gt; &gt; &amp;pilot_symbols, const std::vector&lt; std::vector&lt; gr_complex &gt; &gt; &amp;sync_words, const std::string &amp;len_tag_key=&quot;packet_len&quot;, const bool output_is_shifted=true)</argsstring>
        <name>make</name>
        <param>
          <type>int</type>
          <declname>num_user</declname>
        </param>
        <param>
          <type>float</type>
          <declname>total_power</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bandwidth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_density</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fft_len</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>occupied_carriers</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>pilot_carriers</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; gr_complex &gt; &gt; &amp;</type>
          <declname>pilot_symbols</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; gr_complex &gt; &gt; &amp;</type>
          <declname>sync_words</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>len_tag_key</declname>
          <defval>&quot;packet_len&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>output_is_shifted</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" line="101" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Create frequency domain OFDM symbols from complex values, add pilots. </para>    </briefdescription>
    <detaileddescription>
<para>This block turns a stream of complex, scalar modulation symbols into vectors which are the input for an IFFT in an OFDM transmitter. It also supports the possibility of placing pilot symbols onto the carriers.</para><para>The carriers can be allocated freely, if a carrier is not allocated, it is set to zero. This allows doing OFDMA-style carrier allocations.</para><para>Input: A tagged stream of complex scalars. The first item must have a tag containing the number of complex symbols in this frame. Output: A tagged stream of complex vectors of length fft_len. This can directly be connected to an FFT block. Make sure to set this block to &apos;reverse&apos; for the IFFT. If <computeroutput>output_is_shifted</computeroutput> is true, the FFT block must activate FFT shifting, otherwise, set shifting to false. If given, sync words are prepended to the output. Note that sync words are prepended verbatim, make sure they are shifted (or not).</para><para>Carrier indexes are always such that index 0 is the DC carrier (note: you should not allocate this carrier). The carriers below the DC carrier are either indexed with negative numbers, or with indexes larger than <computeroutput>fft_len/2</computeroutput>. Index -1 and index <computeroutput>fft_len-1</computeroutput> both identify the carrier below the DC carrier.</para><para>Tags are propagated such that a tag on an incoming complex symbol is mapped to the corresponding OFDM symbol. There is one exception: If a tag is on the first OFDM symbol, it is assumed that this tag should stay there, so it is moved to the front even if a sync word is included (any other tags will never be attached to the sync word). This allows tags to control the transmit timing to pass through in the correct position. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="122">
        <label>gr::tagged_stream_block</label>
      </node>
      <node id="121">
        <label>gr::howto::ofdm_carrier_allocator_cvc</label>
        <link refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc"/>
        <childnode refid="122" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="124">
        <label>gr::tagged_stream_block</label>
      </node>
      <node id="123">
        <label>gr::howto::ofdm_carrier_allocator_cvc</label>
        <link refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" line="67" column="1" bodyfile="/home/chk/out-of-tree/gr-howto/include/howto/ofdm_carrier_allocator_cvc.h" bodystart="66" bodyend="113"/>
    <listofallmembers>
      <member refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a0076ddc0e1b9ce0d06d4fe5f54a253d4" prot="public" virt="pure-virtual"><scope>gr::howto::ofdm_carrier_allocator_cvc</scope><name>fft_len</name></member>
      <member refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a480fceae7d7c205082dce83723330cc3" prot="public" virt="pure-virtual"><scope>gr::howto::ofdm_carrier_allocator_cvc</scope><name>len_tag_key</name></member>
      <member refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a233f112ad37ffa10a27dcdc7fe5f4809" prot="public" virt="non-virtual"><scope>gr::howto::ofdm_carrier_allocator_cvc</scope><name>make</name></member>
      <member refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1ab75b49f8b136c4322c1c20030ff86de7" prot="public" virt="pure-virtual"><scope>gr::howto::ofdm_carrier_allocator_cvc</scope><name>occupied_carriers</name></member>
      <member refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1aadbf0eb1e883bdd45ce442e8af76613d" prot="public" virt="pure-virtual"><scope>gr::howto::ofdm_carrier_allocator_cvc</scope><name>pilot_carriers</name></member>
      <member refid="classgr_1_1howto_1_1ofdm__carrier__allocator__cvc_1a52b7a2ff1042c6806ac956420cc23460" prot="public" virt="non-virtual"><scope>gr::howto::ofdm_carrier_allocator_cvc</scope><name>sptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
