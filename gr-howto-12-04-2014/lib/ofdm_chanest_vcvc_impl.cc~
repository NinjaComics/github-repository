/* -*- c++ -*- */
/* 
 * Copyright 2012,2013 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "ofdm_chanest_vcvc_impl.h"
#include "iostream"
#include "fstream"
#include "complex"
#include <math.h>

namespace gr {
  namespace howto {

    ofdm_chanest_vcvc::sptr
    ofdm_chanest_vcvc::make(const std::vector<gr_complex> &sync_symbol1, const std::vector<gr_complex> &sync_symbol2, const std::vector<std::vector<int> > &pilot_carriers, float total_power, int num_user, int n_data_symbols, int eq_noise_red_len, int max_carr_offset, bool force_one_sync_symbol)
    {
      return gnuradio::get_initial_sptr (
	  new ofdm_chanest_vcvc_impl(
	    sync_symbol1,
	    sync_symbol2,
	    pilot_carriers,
	    total_power,
	    num_user,
	    n_data_symbols,
	    eq_noise_red_len,
	    max_carr_offset,
	    force_one_sync_symbol
	  )
      );
    }

    ofdm_chanest_vcvc_impl::ofdm_chanest_vcvc_impl(
	    const std::vector<gr_complex> &sync_symbol1,
	    const std::vector<gr_complex> &sync_symbol2,
	    const std::vector<std::vector<int> > &pilot_carriers,
	    float total_power,
	    int num_user,
	    int n_data_symbols,
	    int eq_noise_red_len,
	    int max_carr_offset,
	    bool force_one_sync_symbol
    ) : block("ofdm_chanest_vcvc",
	      io_signature::make(1, 1, sizeof (gr_complex) * sync_symbol1.size()),
	      io_signature::make3(3, 3, sizeof (gr_complex) * sync_symbol1.size(), sizeof (gr_complex) * sync_symbol1.size(),sizeof (gr_complex)*sync_symbol1.size())),
      d_fft_len(sync_symbol1.size()),
      d_n_data_syms(n_data_symbols),
      d_n_sync_syms(1),
      d_eq_noise_red_len(eq_noise_red_len),
      d_ref_sym((sync_symbol2.size() && !force_one_sync_symbol) ? sync_symbol2 : sync_symbol1),
      d_ref1(sync_symbol1),
      d_ref2(sync_symbol2),
      d_corr_v(sync_symbol2),
      d_noise_sum(0),
      d_count(0),
      d_known_symbol_diffs(0, 0),
      d_new_symbol_diffs(0, 0),
      d_interpolate(false),
      d_num_user(num_user),
      d_occupied_carriers(0),
      d_pilot_carriers(pilot_carriers),
      d_total_power(total_power),
      d_temp1(0),
      d_temp2(0)
    {
	
      // Set index of first and last active carrier
      for (int i = 0; i < d_fft_len; i++) {
	if (d_ref_sym[i] != gr_complex(0, 0)) {
	  d_first_active_carrier = i;
	  break;
	}
      }
      for (int i = d_fft_len-1; i >= 0; i--) {
	if (d_ref_sym[i] != gr_complex(0, 0)) {
	  d_last_active_carrier = i;
	  break;
	}
      }

      // Sanity checks
      if (sync_symbol2.size()) {
	if (sync_symbol1.size() != sync_symbol2.size()) {
	  throw std::invalid_argument("sync symbols must have equal length.");
	}
	if (!force_one_sync_symbol) {
	  d_n_sync_syms = 2;
	}
      } else {
	if (sync_symbol1[d_first_active_carrier+1] == gr_complex(0, 0)) {
	  d_last_active_carrier++;
	  d_interpolate = true;
	}
      }

      // Set up coarse freq estimation info
      // Allow all possible values:
      d_max_neg_carr_offset = -d_first_active_carrier;
      d_max_pos_carr_offset = d_fft_len - d_last_active_carrier - 1;
      if (max_carr_offset != -1) {
	d_max_neg_carr_offset = std::max(-max_carr_offset, d_max_neg_carr_offset);
	d_max_pos_carr_offset = std::min(max_carr_offset, d_max_pos_carr_offset);
      }
      // Carrier offsets must be even
      if (d_max_neg_carr_offset % 2)
	d_max_neg_carr_offset++;
      if (d_max_pos_carr_offset % 2)
	d_max_pos_carr_offset--;

      if (d_n_sync_syms == 2) {
	for (int i = 0; i < d_fft_len; i++) {
	  if (sync_symbol1[i] == gr_complex(0, 0)) {
	    d_corr_v[i] = gr_complex(0, 0);
	  } else {
	    d_corr_v[i] /= sync_symbol1[i];
	  }
	}
      } else {
	d_corr_v.resize(0, 0);
	d_known_symbol_diffs.resize(d_fft_len, 0);
	d_new_symbol_diffs.resize(d_fft_len, 0);
	for (int i = d_first_active_carrier; i < d_last_active_carrier-2 && i < d_fft_len-2; i += 2) {
	  d_known_symbol_diffs[i] = std::norm(sync_symbol1[i] - sync_symbol1[i+2]);
	}
      }

      for (unsigned i = 0; i < d_pilot_carriers.size(); i++) {
	for (unsigned j = 0; j < d_pilot_carriers[i].size(); j++) {
	  if (d_pilot_carriers[i][j] < 0) {
	    d_pilot_carriers[i][j] += d_fft_len;
	  }
	  if (d_pilot_carriers[i][j] > d_fft_len || d_pilot_carriers[i][j] < 0) {
	    throw std::invalid_argument("pilot carrier index out of bounds");
	  }
	  //if (input_is_shifted) {
	    d_pilot_carriers[i][j] = (d_pilot_carriers[i][j] + d_fft_len/2) % d_fft_len;
	  //}
	}
      }

      set_output_multiple(d_n_data_syms);
      set_relative_rate((double) d_n_data_syms / (d_n_data_syms + d_n_sync_syms));
      set_tag_propagation_policy(TPP_DONT);

      d_temp1=std::vector<int>(d_num_user);//subcarrier user allocated to
      d_temp2=std::vector<int>(d_num_user);//user id
    }

    ofdm_chanest_vcvc_impl::~ofdm_chanest_vcvc_impl()
    {
    }

    void
    ofdm_chanest_vcvc_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
    {
      ninput_items_required[0] = (noutput_items/d_n_data_syms) * (d_n_data_syms + d_n_sync_syms);
    }

    int
    ofdm_chanest_vcvc_impl::get_carr_offset(const gr_complex *sync_sym1, const gr_complex *sync_sym2)
    {
      int carr_offset = 0;
      if (d_corr_v.size()) {
	// Use Schmidl & Cox method
	float Bg_max = 0;
	// g here is 2g in the paper
	for (int g = d_max_neg_carr_offset; g <= d_max_pos_carr_offset; g += 2) {
	  gr_complex tmp = gr_complex(0, 0);
	  for (int k = 0; k < d_fft_len; k++) {
	    if (d_corr_v[k] != gr_complex(0, 0)) {
	      tmp += std::conj(sync_sym1[k+g]) * std::conj(d_corr_v[k]) * sync_sym2[k+g];
	    }
	  }
	  if (std::abs(tmp) > Bg_max) {
	    Bg_max = std::abs(tmp);
	    carr_offset = g;
	  }
	}
      } else {
	// Correlate
	std::fill(d_new_symbol_diffs.begin(), d_new_symbol_diffs.end(), 0);
	for(int i = 0; i < d_fft_len-2; i++) {
	  d_new_symbol_diffs[i] = std::norm(sync_sym1[i] - sync_sym1[i+2]);
	}

	float sum;
	float max = 0;
	for (int g = d_max_neg_carr_offset; g <= d_max_pos_carr_offset; g += 2) {
	  sum = 0;
	  for (int j = 0; j < d_fft_len; j++) {
	    if (d_known_symbol_diffs[j]) {
	      sum += (d_known_symbol_diffs[j] * d_new_symbol_diffs[j + g]);
	    }
	    if(sum > max) {
	      max = sum;
	      carr_offset = g;
	    }
	  }
	}
      }
      return carr_offset;
    }

    //reset
    void
    ofdm_chanest_vcvc_impl::reset(std::vector<power> *ptr_init_power_allo, std::vector<user> *ptr_usr)
    {
	//resource allocation initialization
	std::vector<power> a(d_fft_len);
	for (int i=0;i<d_fft_len;i++){
	    a[i].available = 1;
	    a[i].index= i;
	}
	* ptr_init_power_allo=a;

	std::vector<user> b(d_num_user);
	for (int i=0;i<b.size();i++){
	    b[i].allocated = 0;
	    b[i].index = i;
	}
	* ptr_usr = b;
    }

    //compare function for down sort
    bool 
    compare_ (power a, power b)
    {
        power* power_a= &a;
	power* power_b= &b;
	if (power_a->value > power_b->value) return true;
        if (power_a->value < power_b->value) return false;
        return false;
    }

    //genrerate rayleigh random numbers
    std::vector<float> 
    rayleigh_random_ (int num)
    {
	srand (2);

	std::vector<float> ran(num);
	std::vector<float> rayleigh(num);
	for(int i=0;i<num;i++)
        {
            ran[i] = (float)rand();
	    rayleigh[i] = ran[i] / RAND_MAX; 
	    rayleigh[i]=1/0.6552f*sqrt(-2*log(rayleigh[i]));
        }
	return rayleigh;
    }

    void
    ofdm_chanest_vcvc_impl::get_chan_taps(
	const gr_complex *sync_sym1,
	const gr_complex *sync_sym2,
	int carr_offset,
	std::vector<gr_complex> &taps)
    {
      const gr_complex *sym = ((d_n_sync_syms == 2) ? sync_sym2 : sync_sym1);
      std::fill(taps.begin(), taps.end(), gr_complex(0, 0));
      int loop_start = 0;
      int loop_end = d_fft_len;
      if (carr_offset > 0) {
	loop_start = carr_offset;
      } else if (carr_offset < 0) {
	loop_end = d_fft_len + carr_offset;
      }
      for (int i = loop_start; i < loop_end; i++) {
	if ((d_ref_sym[i-carr_offset] != gr_complex(0, 0))) {
	  taps[i-carr_offset] = sym[i] / d_ref_sym[i-carr_offset];
	}
      }

      if (d_interpolate) {
	for (int i = d_first_active_carrier + 1; i < d_last_active_carrier; i += 2) {
	  taps[i] = taps[i-1];
	}
	taps[d_last_active_carrier] = taps[d_last_active_carrier-1];
      }
      
      std::ofstream outfile ("/home/chk/Documents/channel_state.txt");	
	for (int i = 0; i < d_fft_len; i++){
		outfile << i+1 <<"   "<<taps[i] << "\n";
	}
	outfile.close();
      

      if (d_eq_noise_red_len) {
	// TODO
	// 1) IFFT
	// 2) Set all elements > d_eq_noise_red_len to zero
	// 3) FFT
      }
    }

    void
    ofdm_chanest_vcvc_impl::get_noise(
	const gr_complex *sync_sym1,
	const gr_complex *sync_sym2,
	int carr_offset,
        float *ptr_noise_sum,
	int *ptr_avai)
    {
      int loop_start = 0;
      int loop_end = d_fft_len;
      if (carr_offset > 0) {
	loop_start = carr_offset;
      } else if (carr_offset < 0) {
	loop_end = d_fft_len + carr_offset;
      }
std::ofstream outfile ("/home/chk/Documents/sync.txt");	
	std::vector<gr_complex> received_sync1(d_fft_len);
	std::vector<gr_complex> received_sync2(d_fft_len);
	for (int i = 0; i < d_fft_len; i++){
	  received_sync1[i]=sync_sym1[i];
	  received_sync2[i]=sync_sym2[i];
	}

	
	//for (int i = 0; i < d_fft_len; i++){
	//	outfile << sync_sym1[i]<<"   "<< received_sync1[i]<<"   ";
	//}
	for (int i = loop_start; i < loop_end; i++){
	  outfile << received_sync1[i]<<"-     ";
	  
	  if (d_ref2[i] != gr_complex(0,0)){
	    received_sync2[i]*=(conj(d_ref2[i-carr_offset]));
	  }
	  if (d_ref1[i] != gr_complex(0,0)){
	    received_sync1[i]*=(conj(d_ref1[i-carr_offset]));outfile << received_sync1[i]<<"-     ";
	    received_sync1[i]/=2;outfile << received_sync1[i]<<"-     ";
	    received_sync1[i]-=received_sync2[i];outfile << received_sync2[i]<<"-  "<<received_sync1[i];
	    (*ptr_noise_sum)+=norm(received_sync1[i]);
	    (*ptr_avai)++;
	  }
	  if (d_ref1[i] == gr_complex(0,0)&&d_ref2[i] == gr_complex(0,0)){
	    received_sync1[i]-=received_sync2[i];outfile << received_sync2[i]<<"-  "<<received_sync1[i];
	    (*ptr_noise_sum)+=norm(received_sync1[i]);
	    (*ptr_avai)++;
	  }outfile << "    "<<(*ptr_avai)<<" \n";
	}
	(*ptr_noise_sum)=(*ptr_noise_sum)/2;
	//noise = noise/2/avai;
	//std::cout<<(*ptr_noise_sum);
	
	outfile.close();
    }

    void
    ofdm_chanest_vcvc_impl::get_occupied_carriers(float noise,
				std::vector<gr_complex> &chan_taps,
				std::vector<std::vector<int> > &d_occupied_carriers)
    {
	//*******************************//
	//        waterfilling           //
	//*******************************//
	//initial
	std::vector<power> init_power_allo;
	std::vector<user> usr;
	reset(&init_power_allo, &usr);
	
	float d_noise_density = 1e-11f;
	int d_bandwidth = 1e6;
	float d_total_power = 1e-4f;
	std::vector<float> channel_state_info = rayleigh_random_(d_fft_len);

	//initial power allocation
	float NCR_sum=0; //sum of noise to carrier ratio
	float subchannel_noise = d_noise_density*d_bandwidth/d_fft_len;
	std::vector<float> carrier_to_noise_ratio(d_fft_len);
	
	for (int i = 0; i < d_fft_len; i++)
	{
		carrier_to_noise_ratio[i]=channel_state_info[i]*channel_state_info[i]/subchannel_noise;
		NCR_sum= NCR_sum+1/carrier_to_noise_ratio[i];
	}
	for (int i = 0; i < d_fft_len; i++)
	{
		init_power_allo[i].value=(d_total_power + NCR_sum)/d_fft_len - 1/carrier_to_noise_ratio[i];
		init_power_allo[i].NCR=1/carrier_to_noise_ratio[i];
		init_power_allo[i].index=i;
	}

	//iterative part of the algorithm
	//negtive check
	bool is_negtive=false;
	for(int i=0;i<d_fft_len;i++)
	{
		if(init_power_allo[i].value<0)
			is_negtive=true;
	}

	//iterative calculation
	while(is_negtive)
	{
		float NCR_rem_sum=0;
		int num_subchannel_rem=0;
		std::vector<float> CRN_rem(d_fft_len,0);
		for (int i=0;i<d_fft_len;i++)
		{
			if(init_power_allo[i].value>0)
			{
				num_subchannel_rem++;
				CRN_rem[i]=carrier_to_noise_ratio[i];
				NCR_rem_sum=NCR_rem_sum+1/CRN_rem[i];
			}
			else
				init_power_allo[i].value=0;
		}
		for (int i=0;i<d_fft_len;i++)
		{
			if(init_power_allo[i].value>0)
			{
				init_power_allo[i].value=(d_total_power + NCR_rem_sum)/num_subchannel_rem - 1/CRN_rem[i];
				init_power_allo[i].NCR=1/CRN_rem[i];
			}
		}
		//negtive check
		int num_negtive=0;
		for(int i=0;i<d_fft_len;i++)
		{
			if(init_power_allo[i].value<0)
				num_negtive++;
		}
		if(num_negtive==0)
			is_negtive=false;
	}

	//disable pilot carriers
	for (int i = 0; i < d_pilot_carriers[0].size(); i++){
		init_power_allo[d_pilot_carriers[0][i]].available = 0;
	}

	//sort
	std::sort(init_power_allo.begin(), init_power_allo.end(), compare_);

	//*************************//
	//      allocate user      //
	//*************************//	
	for (int i = 0; i < usr.size(); i++){
	    
		for(int j = 0; j < d_fft_len; j++){
			if(init_power_allo[j].value!=0&&usr[i].allocated!=1&&init_power_allo[j].available==1){
				d_temp1[i]=init_power_allo[j].index;
				d_temp2[i]=usr[i].index;
				init_power_allo[j].available=0;
				usr[i].allocated =1;
			}
		}
	}

	d_occupied_carriers.push_back(d_temp1);
    }

    // Operates on a per-frame basis
    int
    ofdm_chanest_vcvc_impl::general_work (int noutput_items,
                       gr_vector_int &ninput_items,
                       gr_vector_const_void_star &input_items,
                       gr_vector_void_star &output_items)
    {
      const gr_complex *in = (const gr_complex *) input_items[0];
      gr_complex *out = (gr_complex *) output_items[0];
      const int framesize = d_n_sync_syms + d_n_data_syms;
	
      // Channel info estimation
      int carr_offset = get_carr_offset(in, in+d_fft_len);
      std::vector<gr_complex> chan_taps(d_fft_len, 0);
      get_chan_taps(in, in+d_fft_len, carr_offset, chan_taps);
      add_item_tag(0, nitems_written(0),
	  pmt::string_to_symbol("ofdm_sync_carr_offset"),
	  pmt::from_long(carr_offset));
      add_item_tag(0, nitems_written(0),
	  pmt::string_to_symbol("ofdm_sync_chan_taps"),
	  pmt::init_c32vector(d_fft_len, chan_taps));

      // Noise estimation
      float noise_sum = 0;
      int avai=0;
      float noise=0;
      get_noise(in, in+d_fft_len, carr_offset, &noise_sum, &avai);
      d_count++;
      d_noise_sum+=noise_sum;
      noise=d_noise_sum/(d_count*avai);
      gr_complex noise_c = gr_complex(noise, 0);
      
      // Get occupied carriers
      get_occupied_carriers(noise, chan_taps, d_occupied_carriers);
      for (int i=0;i<d_num_user;i++){
	std::cout<<d_occupied_carriers[0][i]<<"   ";}
      add_item_tag(0, nitems_written(0),
	  pmt::string_to_symbol("ofdm_occupied_carriers"),
	  pmt::init_s32vector(d_fft_len, d_occupied_carriers[0]));

      // Copy data symbols
      if (output_items.size() == 3) {
	std::vector<gr_complex> chantaps_copy(d_fft_len, 0);
	std::fill(chantaps_copy.begin(), chantaps_copy.end(), gr_complex(0, 0));
	std::vector<gr_complex> noise_copy(d_fft_len, 0);
	std::fill(noise_copy.begin(), noise_copy.end(), gr_complex(0, 0));
	for (int i=0;i<d_fft_len;i++){
	  chantaps_copy[i]=chan_taps[i];
	}
	noise_copy[0]=noise_c;
	

	gr_complex *out_chantaps = (gr_complex *) output_items[1];
	gr_complex *out_noise = (gr_complex *) output_items[2];
	memcpy((void *) out_chantaps, (void *) &chantaps_copy[0], sizeof(gr_complex) * d_fft_len);
	produce(1, d_fft_len);
	memcpy((void *) out_noise, (void *) &noise_copy[0], sizeof(gr_complex) * d_fft_len);
	produce(2, d_fft_len);
	
	
      }
	
      memcpy((void *) out,
	     (void *) &in[d_n_sync_syms * d_fft_len],
	     sizeof(gr_complex) * d_fft_len * d_n_data_syms);

      // Propagate tags
      std::vector<gr::tag_t> tags;
      get_tags_in_range(tags, 0,
	  nitems_read(0),
	  nitems_read(0)+framesize);
      for (unsigned t = 0; t < tags.size(); t++) {
	int offset = tags[t].offset - nitems_read(0);
	if (offset < d_n_sync_syms) {
	  offset = 0;
	} else {
	  offset -= d_n_sync_syms;
	}
	tags[t].offset = offset + nitems_written(0);
	add_item_tag(0, tags[t]);
      }

      produce(0, d_n_data_syms);
      consume_each(framesize);
      return WORK_CALLED_PRODUCE;
    }

  } /* namespace hwoto */
} /* namespace gr */

